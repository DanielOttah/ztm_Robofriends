{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","username","email","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","boder","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","dat","json","res","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2PAeeA,G,MAZF,SAACC,GACV,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UACV,2BAAIN,EAAMO,WCNbC,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEvB,OACI,6BACIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CACJC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdC,KAAMI,EAAOG,GAAGP,KAChBC,SAAUG,EAAOG,GAAGN,SACpBC,MAAOE,EAAOG,GAAGL,aCZxBO,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAExB,OACI,yBAAKd,UAAU,OACX,2BAAOA,UAAU,mCAAmCe,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCKrGI,EATA,SAACnB,GAEZ,OACI,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,MAAO,kBAAmBC,OAAQ,UAChEvB,EAAMwB,WCiBJC,E,kDAnBX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHC,E,8DAMDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG1B,OAAIG,KAAKJ,MAAMC,SACJ,8DAEJG,KAAK9B,MAAMwB,a,GAfEQ,IAAMC,WC0DnBC,E,kDAlDb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAjB1C,EAAKb,MAAQ,CACXjB,OAAQ,GACR4B,YAAa,IAJH,E,kMAYMG,MAAM,8C,cAAlBC,E,gBACYA,EAAIC,O,OAAhBC,E,OACNb,KAAKC,SAAS,CAAEtB,OAAQkC,I,qIAQhB,IAAD,OACDC,EAAiBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAApC,GAC9C,OAAOA,EAAOJ,KAAKyC,cAAcC,SAAS,EAAKrB,MAAMW,YAAYS,kBAKnE,OAAiC,IAA7BhB,KAAKJ,MAAMjB,OAAOuC,OACb,2CAGL,yBAAK/C,UAAU,MACb,4BAAQA,UAAU,KAElB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAce,KAAKK,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,OAAQmC,W,GAzCdZ,IAAMC,WCGJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCANC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.3a5087f8.chunk.js","sourcesContent":["import React from 'react';\r\n// import { robots } from './robots.js';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?150x150`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.username}</p>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n// import { robots } from './robots.js';\r\n\r\nexport const CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>{\r\n            robots.map((user, i) => {\r\n                return (<Card\r\n                    key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name}\r\n                    username={robots[i].username}\r\n                    email={robots[i].email} />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n    // return (\r\n    //     <div>            \r\n    //         { <Card id={robots[0].id} name={robots[0].name} username={robots[0].username} email={robots[0].email} />\r\n    //         <Card id={robots[1].id} name={robots[1].name} username={robots[1].username} email={robots[1].email} />\r\n    //         <Card id={robots[2].id} name={robots[2].name} username={robots[2].username} email={robots[2].email} />\r\n    //         <Card id={robots[3].id} name={robots[3].name} username={robots[3].username} email={robots[3].email} />\r\n    //         <Card id={robots[4].id} name={robots[4].name} username={robots[4].username} email={robots[4].email} />\r\n    //         <Card id={robots[5].id} name={robots[5].name} username={robots[5].username} email={robots[5].email} />\r\n    //         <Card id={robots[6].id} name={robots[6].name} username={robots[6].username} email={robots[6].email} />\r\n    //         <Card id={robots[7].id} name={robots[7].name} username={robots[7].username} email={robots[7].email} />\r\n    //         <Card id={robots[8].id} name={robots[8].name} username={robots[8].username} email={robots[8].email} />\r\n    //         <Card id={robots[9].id} name={robots[9].name} username={robots[9].username} email={robots[9].email} /> }\r\n\r\n    //     </div>\r\n    // );\r\n}","import React from 'react'\r\n\r\nexport const SearchBox = ({ searchChange }) => {\r\n\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type='search' placeholder='search robots' onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n// export default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    // return props.children\r\n    return (\r\n        <div style={{ overflowY: 'scroll', boder: \"1px solid black\", height: '600px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops! Something went wrong!</h1>\r\n        }\r\n        return this.props.children;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from '../components/CardList';\n// import { robots } from './robots';\nimport { SearchBox } from '../components/SearchBox.js';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundary from '../components/ErrorBoundary.js';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n  async componentDidMount() {\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(users => this.setState({ robots: users }));\n\n    const dat = await fetch('https://jsonplaceholder.typicode.com/users');\n    const res = await dat.json();\n    this.setState({ robots: res })\n\n\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n\n  }\n  render() {\n    const filteredRobots = this.state.robots.filter(robots => {\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    // console.log(filteredRobots);\n\n    // function App() {\n    if (this.state.robots.length === 0) {\n      return <h1>Loading ...</h1>\n    } else {\n      return (\n        <div className=\"tc\">\n          <header className=\"\">\n          </header>\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n// import { CardList } from './CardList.js'\n\n\n\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <CardList />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n// );\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}